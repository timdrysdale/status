// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StreamStatus Status of a stream
//
// swagger:model StreamStatus
type StreamStatus struct {

	// is the experiment currently actively sending?
	// Required: true
	Active *bool `json:"active"`

	// number of clients connected (0 if just the experiment)
	// Required: true
	Clients *int64 `json:"clients"`

	// is the experiment currently connected to relay?
	// Required: true
	Connected *bool `json:"connected"`

	// duration since last send by experiment
	// Required: true
	Last *string `json:"last"`

	// does the experiment require this stream?
	// Required: true
	Required *bool `json:"required"`
}

// Validate validates this stream status
func (m *StreamStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLast(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequired(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StreamStatus) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *StreamStatus) validateClients(formats strfmt.Registry) error {

	if err := validate.Required("clients", "body", m.Clients); err != nil {
		return err
	}

	return nil
}

func (m *StreamStatus) validateConnected(formats strfmt.Registry) error {

	if err := validate.Required("connected", "body", m.Connected); err != nil {
		return err
	}

	return nil
}

func (m *StreamStatus) validateLast(formats strfmt.Registry) error {

	if err := validate.Required("last", "body", m.Last); err != nil {
		return err
	}

	return nil
}

func (m *StreamStatus) validateRequired(formats strfmt.Registry) error {

	if err := validate.Required("required", "body", m.Required); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stream status based on context it is used
func (m *StreamStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StreamStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StreamStatus) UnmarshalBinary(b []byte) error {
	var res StreamStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
